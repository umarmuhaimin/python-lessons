### Python Lists Cheat Sheet (Methods) ###

#########################################################################################################

# ðŸ”¹ Adding Items

fruits = ["apple", "banana"]

# ðŸ‘‰ list.append(item) â†’ Adds item to the end of the list.
#     â†’ fruits.append("cherry")
#     â†’ print(fruits)  # ["apple", "banana", "cherry"]

# ðŸ‘‰ list.insert(index, item) â†’ Inserts item at a specific position.
#     â†’ fruits.insert(1, "orange")
#     â†’ print(fruits)  # ["apple", "orange", "banana", "cherry"]

# ðŸ‘‰ list.extend(other_list) â†’ Adds multiple items from another list.
#     â†’ fruits.extend(["mango", "grape"])
#     â†’ print(fruits)  # ["apple", "orange", "banana", "cherry", "mango", "grape"]

#########################################################################################################

# ðŸ”¹ Removing Items

fruits = ["apple", "banana"]

# ðŸ‘‰ list.remove(item) â†’ Removes the first matching item.
#     â†’ fruits.remove("banana")
#     â†’ print(fruits)

# ðŸ‘‰ list.pop(index) â†’ Removes item at index (default = last item).
#     â†’ fruits.pop()      # removes last
#     â†’ fruits.pop(1)     # removes item at index 1
#     â†’ () means default. default = last item

# ðŸ‘‰ list.clear() â†’ Removes all items.
#     â†’ fruits.clear()
#     â†’ print(fruits)  # []

#########################################################################################################

# ðŸ”¹ Searching & Counting

nums = [1, 2, 3, 2]

# ðŸ‘‰ list.index(item) â†’ Returns the index of first occurrence.
#     â†’ print(nums.index(2))  # 1
# Even though there are two 2s, .index() only gives the first one it finds.

# ðŸ‘‰ If you want all the positions of an item, youâ€™d need a loop:
#     â†’ nums = [10, 20, 30, 20, 40]
#     â†’ for i in range(len(nums)):
#     â†’     if nums[i] == 20:
#     â†’         print(i)
# Output: 1, 3 â†’ Postion index [1] and Position index [3]

# ðŸ‘‰ list.count(item) â†’ Counts how many times an item appears.
#     â†’ print(nums.count(2))  # 2

#########################################################################################################

# ðŸ”¹ Sorting & Reversing

nums = [3, 1, 4, 2]

# ðŸ‘‰ list.sort() â†’ Sorts list in ascending order (numbers or alphabet).
#     â†’ nums.sort()
#     â†’ print(nums)  # [1, 2, 3, 4]


# ðŸ‘‰ list.sort(reverse=True) â†’ Sort in descending order.
#     â†’ nums.sort(reverse=True)
#     â†’ print(nums)  # [4, 3, 2, 1]


# ðŸ‘‰ list.reverse() â†’ Reverses the list (not sorted).
#     â†’ fruits = ["apple", "banana", "cherry"]
#     â†’ fruits.reverse()
#     â†’ print(fruits)  # ["cherry", "banana", "apple"]

#########################################################################################################

# ðŸ”¹ Copying

# ðŸ‘‰ list.copy() â†’ Creates a shallow copy of the list.
#     â†’ new_fruits = fruits.copy()

#########################################################################################################

# ðŸ”¹ Tip: Lists are mutable â†’ they can be changed after creation.

#########################################################################################################

# ðŸ”Ž Why use .index()?

# ðŸ‘‰ To locate something quickly in a list. In short, index() tells you the position of a value/item in the list.

# ðŸ‘‰ Example: 
#     â†’ if you have 100 students and you want to know where "Hermione" is in the list, .index() gives you her position.

students = ["Harry", "Ron", "Hermione", "Draco"]
#     â†’ print(students.index("Hermione"))
# Output : 2 â†’ Position index [2]
# "Hermione" is in the 3rd place in the list (remember, Python starts counting at 0)

#########################################################################################################

# ðŸ”¹ how to safely check if an item is in a list before using .index()?

# ðŸ‘‰ Method 1: Using "in"
nums = [10, 20, 30, 40]

#     â†’ if 20 in nums:
#     â†’     print(nums.index(20))  # âœ… Safe to use
#     â†’ else:
#     â†’     print("20 not found")
# Output : 1

# ðŸ‘‰ Method 2: Tryâ€“Except (handles errors) [ADVANCED METHOD]
nums = [10, 20, 30, 40]

#     â†’ try:
#     â†’     print(nums.index(50))  # 50 is not in the list
#     â†’ except ValueError:
#     â†’     print("50 not found")
# Output : 50 not found

# âœ… Summary:

# Use in â†’ quick check if item exists.
# Use try/except â†’ handle error if item might not exist.

# ðŸ‘‰ To quick check if item exist â†’ use "in"
# ðŸ‘‰ To check whether item might not exist â†’ use "try/except"

#########################################################################################################

# ðŸ”¹ Hereâ€™s the practical breakdown for big projects in VS Code:

# ðŸ‘‰ Main code place (.py files):
#     â†’ Where your main program lives.
#     â†’ Youâ€™ll always keep your list logic, functions, classes, etc. here.
#     â†’ Example: students.py has students = ["Harry", "Ron", "Hermione"].

# ðŸ‘‰ VS Code terminal (or Python shell):
#     â†’ Perfect for quick testing / debugging when the project is big.
#     â†’ If youâ€™re not sure whatâ€™s inside students or want to test .index(), .append(), etc., you can:
#       1. Run your file (python students.py)
#       2. Or open a Python interactive shell in VS Codeâ€™s terminal and type:

#       >>> students = ["Harry", "Ron", "Hermione"]
#       >>> students.append("Draco")
#       >>> students
#       ['Harry', 'Ron', 'Hermione', 'Draco']

# ðŸ‘‰ So yes â€” in practical coding, if the project is too big and you donâ€™t want to scroll through files or trace variables, you can use the terminal/interactive shell to test updates on lists (or any variable) without breaking your main code.


