### Objective : In this python file, we will learn ways to print data from a list ###

#########################################################################################################

# ðŸ”¹ Beginner_level_list 
students = ["Hermione", "Harry", "Ron"]
print(students[0])
print(students[1])
print(students[2])
# Output : 
# â†’ Hermione [0]
# â†’ Harry [1]
# â†’ Ron [2]

# ðŸ‘‰ Order/arrangement matters in a list that stores data.

# ðŸ”¹ Forloop_list
students = ["Hermione", "Harry", "Ron"]
for student in students:
    print(student)
# Output : 
# â†’ Hermione [0]
# â†’ Harry [1]
# â†’ Ron [2]

# ðŸ”¹ Range_list
students = ["Hermione", "Harry", "Ron"]
for i in range(len(students)):
    print(students[i])         # from i = 0 â†’ i = 2
# Output : 
# â†’ Hermione [0]
# â†’ Harry [1]
# â†’ Ron [2]

# ðŸ‘‰ Explaination : 
# â†’ range() only accepts numbers.
# â†’ len() tells us how many items are in the list.  So if the item inside the list is a string/integer/etc ; len() will convert the data inside the list into numbers.
# â†’ By combining them, we can loop through a list by its indexes.
# â†’ This lets us access each item one by one using list[index].
# â†’ Because i is being used as an index to access each element of the list.
# â†’ So effectively, the code prints all items in the list one by one.

# ðŸ‘‰ Why len() is needed:
# â†’ len(students) â†’ gives the number of items in the list (3).
# â†’ range(3) â†’ now Python knows to loop i = 0, 1, 2.
# â†’ Thatâ€™s why len() is used: it translates the list into a number that range() can work with.

# ðŸ‘‰ Step by step:
# â†’ len(students) â†’ gives 3 (because there are 3 names).
# â†’ range(3) â†’ generates numbers [0, 1, 2].
# â†’ The loop runs with i = 0, then i = 1, then i = 2 one at a time.
# â†’ Each time, students[i] prints:
#    â†’ When i = 0 â†’ "Hermione"
#    â†’ When i = 1 â†’ "Harry"
#    â†’ When i = 2 â†’ "Ron"

# ðŸ‘‰ Summary : 
# â†’ i itself is just a number (the index).
# â†’ students[i] means: "go into the list students and get the item at position i one by one from the first item until the last item from the list."
# So every loop, i changes â†’ students[i] prints one single item.
# Since you have a loop variable "i" from "for i in range()" â†’ order/arrangement matters.

# ðŸ”¹ Printing List with Position Numbers 
students = ["Hermione", "Harry", "Ron"]
for i in range(len(students)):
    print(i, students[i])
# Output :
# â†’ 0 Hermione
# â†’ 1 Harry
# â†’ 2 Ron

# ðŸ”¹ Printing List with Position Numbers starting from "1" instead of "0"
students = ["Hermione", "Harry", "Ron"]
for i in range(len(students)):
    print(i + 1, students[i])
# Output :
# â†’ 1 Hermione  ðŸ‘‰ i = 0 + 1 â†’ 1
# â†’ 2 Harry     ðŸ‘‰ i = 1 + 1 â†’ 2
# â†’ 3 Ron       ðŸ‘‰ i = 2 + 1 â†’ 3

#########################################################################################################

### Dictionaries (dict) ###
 
# ðŸ‘‰ A collection of key-value pairs, written with { }.
# ðŸ‘‰ Syntax: {key: value}
# ðŸ‘‰ Keys are unique, values can be repeated.

# ðŸ”¹ Accessing Dictionary Values for each respective keys.
# â†’ Print the name of houses for each respective person 

# ðŸ‘‰ General method for dict :
students = {
    "Hermione": "Gryffindor",
    "Harry": "Gryffindor",
    "Ron": "Gryffindor",
    "Draco": "Slytherin"
}

print(students["Hermione"])
print(students["Harry"])
print(students["Ron"])
print(students["Draco"]) 
# Output :
# â†’ Gryffindor
# â†’ Gryffindor
# â†’ Gryffindor
# â†’ Slytherin

# ðŸ‘‰ forloops_dict :
students = {
    "Hermione": "Gryffindor",
    "Harry": "Gryffindor",
    "Ron": "Gryffindor",
    "Draco": "Slytherin"
}
for student in students:
    print(student, students[student], sep=", ")
# Output :
# â†’ Hermione, Gryffindor
# â†’ Harry, Gryffindor
# â†’ Ron, Gryffindor
# â†’ Draco, Slytherin

# ðŸ‘‰ List of Dictionaries : Storing Multiple Dictionaries in a List / Storing multiple pairs of key_and_value in a list.
# a dictionary is when you have a single set of {key: value}
# [1] dict means 1 set of {key: value} â†’ {key: value}
# [2] dict means 2 set of {key: value} â†’ {key: value}, {key: value}
# [3] dict means 3 set of {key: value} â†’ {key: value}, {key: value}, {key: value}
# In short, if you have multiple dictionaries â†’ USE List of dictionaries. List is because you have "[]".
students = [
    {"name": "Hermione", "house": "Gryffindor", "patronus": "Otter"},
{"name": "Harry", "house": "Gryffindor", "patronus": "Stag"},
{"name": "Ron", "house": "Gryffindor", "patronus": "Jack Russel terrier"},
{"name": "Draco", "house": "Slytherin", "patronus": None}
]

for student in students:
    print(student["name"], student["house"], student["patronus"], sep=", ")
# Output :
# â†’ Hermione, Gryffindor, Otter
# â†’ Harry, Gryffindor, Stag
# â†’ Ron, Gryffindor, Jack Russel terrier
# â†’ Draco, Slytherin, None











